{"version":3,"sources":["styles/typed-components.ts","Components/IconCheckbox/IconCheckbox.tsx","Components/IconCheckbox/index.tsx","Components/ProgressBar/ProgressBar.tsx","Components/ProgressBar/index.tsx","Components/Button/Button.tsx","Components/Button/index.tsx","Components/Form/Form.tsx","Components/Form/index.tsx","Routes/Home/HomePresenter.tsx","Routes/Home/HomeFetch.tsx","Routes/Home/index.tsx","Routes/Home/HomeContainer.tsx","styles/theme.ts","App.tsx","styles/global-styles.ts","index.tsx"],"names":["styled","default","ThemeProvider","createGlobalStyle","Container","div","InputCheck","input","Label","label","IconCheckbox","id","value","name","svgPath","onInputChange","type","onChange","htmlFor","xmlns","width","height","viewBox","d","Data","props","content","idx","ProgressBar","Button","className","form","Form","children","submitFn","onSubmit","theme","grayColor","ExtendedForm","Box","CheckboxList","IconCheckboxList","Info","h5","Header","h3","ProgressBarBox","ExtendedButton","HomePresenter","list","loading","isChecked","map","item","key","title","checked","useFetch","handleCallback","useState","setLoading","initialData","a","axios","result","status","statusText","console","log","data","useEffect","setTimeout","Home","setList","event","target","preventDefault","blueColor","AppPresenter","to","exact","component","from","App","GlobalStyles","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.304b84d0.chunk.js","sourcesContent":["import * as StyleThings from \"styled-components\";\r\nimport { ThemedStyledComponentsModule } from \"styled-components\";\r\n\r\ninterface IProps {\r\n    blueColor: string;\r\n    grayColor: string;\r\n}\r\n\r\nconst {\r\n    default: styled,\r\n    ThemeProvider,\r\n    createGlobalStyle\r\n} = StyleThings as ThemedStyledComponentsModule<IProps>;\r\n\r\n\r\nexport { ThemeProvider, createGlobalStyle };\r\nexport default styled;","import React from \"react\";\r\nimport styled from \"../../styles/typed-components\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 40px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\n\r\nconst InputCheck = styled.input`\r\n    height: 0;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    \r\n    &:checked,\r\n    &:hover {\r\n        & ~ label {\r\n            color: #06ad88;\r\n            & svg {\r\n                fill: #06ad88;\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nconst Label = styled.label`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: fit-content;\r\n    height: 100%;\r\n    display: flex;\r\n    cursor: pointer;\r\n    justify-content: flex-start;\r\n    font-size: 20px;\r\n    align-items: center;\r\n    background-color: white;\r\n    transition: .3s;\r\n    white-space: nowrap;\r\n    color: #b1b1b1;\r\n    svg {\r\n        transition: .3s;\r\n        fill: #b1b1b1;\r\n        margin-right: 20px;\r\n    }\r\n`;\r\n\r\ninterface IProps {\r\n    id: string;\r\n    value: string;\r\n    name: string;\r\n    svgPath: string;\r\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst IconCheckbox: React.FC<IProps> = ({\r\n    id,\r\n    value,\r\n    name,\r\n    svgPath,\r\n    onInputChange\r\n}) => (\r\n    <Container>\r\n        <InputCheck id={id} name={name} type={\"checkbox\"} onChange={onInputChange}/>\r\n            <Label htmlFor={id}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d={svgPath}/></svg>\r\n                { value }\r\n            </Label>\r\n    </Container>\r\n);\r\n\r\nexport default IconCheckbox;","import IconCheckbox from \"./IconCheckbox\";\r\nexport default IconCheckbox;","import React from \"react\";\r\nimport styled from \"../../styles/typed-components\";\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    & > div {\r\n        margin: 0 auto;\r\n        box-shadow: 0 2px 4px rgba(0,0,0,.24), 0 4px 6px rgba(0,0,0,0.34);\r\n        background-color: #009284;\r\n    }\r\n    &:not(:nth-of-type(1)) {\r\n        margin-top: 40px;\r\n        &::before {\r\n            content:\"\";\r\n            position: absolute;\r\n            width: 3px;\r\n            height: 40px;\r\n            top: -40px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background-color: #009284;\r\n        }\r\n    }\r\n`;\r\ninterface IData {\r\n    idx: number;\r\n    content: string;\r\n}\r\nconst Data = styled.div<IData>`\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 30px;\r\n    height: 30px;\r\n    padding: 10px;\r\n    \r\n    border-radius: 50%;\r\n    &::after {\r\n        content: \"${props => props.content}\";\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        left: 100%;\r\n        padding-left: 20px;\r\n        width: fit-content;\r\n        white-space: nowrap;\r\n        height: 20px;\r\n        color: #009688;\r\n    }\r\n    &::before {\r\n        content: \"Step ${props => props.idx}.\";\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        right:100%;\r\n        padding-right: 18px;\r\n        width: fit-content;\r\n        height: 20px;\r\n        color: #009688;\r\n        white-space: nowrap;\r\n        font-style: italic;\r\n    }\r\n    svg {\r\n        fill: white;\r\n    }\r\n`;\r\n\r\ninterface IProps {\r\n    svgPath: string;\r\n    content: string;\r\n    idx: number;\r\n}\r\n\r\nconst ProgressBar: React.FC<IProps> = ({\r\n    svgPath,\r\n    content,\r\n    idx\r\n}) => (\r\n    <Container>\r\n        <Data idx={idx} content={content}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\"><path d={svgPath}/></svg>\r\n        </Data>\r\n    </Container>\r\n);\r\n\r\nexport default ProgressBar;","import ProgressBar from \"./ProgressBar\";\r\nexport default ProgressBar;","import React from \"react\";\r\nimport styled from \"../../styles/typed-components\";\r\n\r\nconst Container = styled.input`\r\n    padding: 12.5px 30px;\r\n    background-color: #54c0b9;\r\n    color: white;\r\n    border-radius: 10px;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n    border: 1.5px solid #54c0b9;\r\n    transition: .3s;\r\n    &:hover {\r\n        background-color: white;\r\n        color: #54c0b9;\r\n    }\r\n`;\r\n\r\ninterface IProps {\r\n    value: string;\r\n    className: string;\r\n}\r\n\r\nconst Input: React.FC<IProps> = ({\r\n    value,\r\n    className\r\n}) => (\r\n    <Container \r\n        type={\"submit\"}\r\n        className={className}\r\n        value={value}\r\n    />\r\n);\r\n\r\nexport default Input;","import Button from \"./Button\";\r\nexport default Button;","import React, { FormEvent } from \"react\";\r\nimport styled from \"../../styles/typed-components\";\r\n\r\nconst Container = styled.form`\r\n\r\n`;\r\n\r\ninterface IProps {\r\n    submitFn: (React: FormEvent<HTMLFormElement>) => any;\r\n    className?: string;\r\n}\r\n\r\nconst Form: React.FC<IProps> = ({\r\n    children,\r\n    submitFn,\r\n    className\r\n}) => (\r\n    <Container onSubmit={submitFn} className={className}>\r\n        {\r\n            children            \r\n        }\r\n    </Container>\r\n);\r\n\r\nexport default Form;","import Form from \"./Form\";\r\nexport default Form;","import React, { FormEvent } from \"react\";\r\nimport styled from \"../../styles/typed-components\";\r\nimport Checkbox  from \"../../Components/Checkbox\";\r\nimport IconCheckbox from \"../../Components/IconCheckbox\";\r\nimport ProgressBar from \"../../Components/ProgressBar\";\r\nimport Button from \"../../Components/Button\";\r\nimport Form from \"../../Components/Form\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100vh;\r\n    box-sizing: border-box;\r\n    background-color: ${props => props.theme.grayColor};\r\n    padding: 50px;\r\n`;\r\nconst ExtendedForm = styled(Form)`\r\n    border: 1px solid #dfdfdf;\r\n    background-color: white;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 20px;\r\n    box-shadow: -3px 3px 3px rgba(0,0,0,.34)\r\n`;\r\nconst Box = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: center;\r\n`;\r\nconst CheckboxList = styled.div`\r\n    display: flex;\r\n    box-sizing: border-box;\r\n`;\r\nconst IconCheckboxList = styled(CheckboxList)`\r\n    flex-flow: column;\r\n    width: 400px;\r\n    justify-content: space-around;\r\n    padding-left: 40px;\r\n`;\r\n\r\nconst Info = styled.h5`\r\n    margin-top: 0;\r\n    font-size: 13px;\r\n    span {\r\n        color: #2854ff;\r\n    }\r\n`;\r\nconst Header = styled.h3`\r\n    font-size: 20px;\r\n`;\r\nconst ProgressBarBox = styled.div`\r\n    padding-left: 40px;\r\n`;\r\nconst ExtendedButton = styled(Button)`\r\n    margin: 30px;\r\n    width: 210px;\r\n    border-radius: 0;\r\n    font-size: 17px;\r\n    text-transform: uppercase;\r\n`;\r\n\r\ninterface IList {\r\n    id: number;\r\n    name: string;\r\n    title: string;\r\n    content: string;\r\n    type: string;\r\n    checked: boolean;\r\n    svgPath: string;\r\n}\r\ninterface IProps {\r\n    list: Array<IList>;\r\n    loading: boolean;\r\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onSubmit: (event: FormEvent<HTMLFormElement>) => any;\r\n}\r\n\r\nconst HomePresenter: React.FC<IProps> = ({\r\n    list,\r\n    loading,\r\n    onInputChange,\r\n    onSubmit\r\n}) => {\r\n    var idx: number = 0;\r\n    var isChecked: boolean = false;\r\n    return (\r\n        <Container>\r\n        { loading && (\"loading...\") }\r\n        {\r\n            !loading && (\r\n                <ExtendedForm submitFn={onSubmit} className={\"form\"}>\r\n                <Info><span>Print  </span> > KMA9DA3E</Info>\r\n                <Header> Actions</Header>\r\n                <Box>\r\n                    {/* <CheckboxList>\r\n                        {\r\n                            list.map(item => <Checkbox key={item.id} id={item.id + \"\"} value={item.title} onInputChange={onInputChange}></Checkbox>)\r\n                        }\r\n                    </CheckboxList> */}\r\n                    <IconCheckboxList>\r\n                    {\r\n                        list.map(item => <IconCheckbox key={item.id} id={item.id + \"\"} name={item.name} value={item.title} svgPath={item.svgPath} onInputChange={onInputChange}/>)\r\n                    }\r\n                    </IconCheckboxList>\r\n                    <ProgressBarBox>\r\n                    {\r\n                        list.map(item => {\r\n                            if(item.checked) {\r\n                                isChecked = true;\r\n                                return <ProgressBar key={item.id} idx={++idx} content={item.content} svgPath={item.svgPath}/>\r\n                            }\r\n                        })\r\n                    }\r\n                    </ProgressBarBox>\r\n                </Box>\r\n                {\r\n                    isChecked && <ExtendedButton className={\"button\"} value={\"Submit\"} />\r\n                }\r\n\r\n                </ExtendedForm>\r\n            )\r\n        }\r\n\r\n    </Container>\r\n    )\r\n}\r\n\r\nexport default HomePresenter;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\ninterface IList {\r\n    id: number;\r\n    name: string;\r\n    svgPath: string;\r\n}\r\n\r\nconst URL: string = \"/dummy/setting_list.json\";\r\n\r\nconst useFetch = (handleCallback) => {\r\n    const [ loading, setLoading ] = useState(true);\r\n    const initialData = async () => {\r\n            const result = await axios(URL);\r\n            if(result.status === 200 && result.statusText === \"OK\") {\r\n                console.log(result);\r\n                const { data }: { data: IList[] } = result;\r\n                handleCallback([ ...data ]);\r\n                setLoading(false);\r\n            }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            initialData();\r\n        }, 2000);\r\n    }, []);\r\n\r\n    return loading;\r\n};\r\n\r\nexport default useFetch;","import Home from \"./HomeContainer\";\r\n\r\nexport default Home;","import React, { useState } from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport useFetch from \"./HomeFetch\";\r\n\r\ninterface IList {\r\n    id: number,\r\n    name: string;\r\n    title: string;\r\n    content: string;\r\n    type: string;\r\n    checked: boolean;\r\n    svgPath: string;\r\n}\r\n\r\nconst HomeContainer: React.FC<any> = () => {\r\n    const initLists: Array<IList> = [\r\n        { id: 9999, name: \"\", title: \"\", type: \"\", svgPath: \"\", checked: false, content: \"\" }\r\n    ];\r\n    const [ list, setList ] = useState(initLists);\r\n    const loading: boolean = useFetch(setList);\r\n\r\n    const onInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        const { target: { name, checked }} = event;\r\n        list.map(item => {\r\n            if(item.name === name)\r\n                item.checked = checked;\r\n        });\r\n        setList([\r\n            ...list\r\n        ]);\r\n        console.log(list);\r\n    }\r\n    const onSubmit: React.FormEventHandler<HTMLFormElement> = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"현재 설정: \", list);\r\n    }\r\n    return <HomePresenter loading={loading} list={list} onInputChange={onInputChange} onSubmit={onSubmit}/>\r\n}\r\n\r\nexport default HomeContainer;\r\n","const theme = {\r\n    blueColor: \"#2196f3\",\r\n    grayColor: \"#ececec\"\r\n};\r\n\r\nexport default theme;","import React from \"react\";\nimport { BrowserRouter, Route,  Redirect, Switch } from \"react-router-dom\";\nimport Home from \"./Routes/Home\";\nimport { ThemeProvider } from \"./styles/typed-components\";\nimport theme from \"./styles/theme\";\n\nconst App: React.FC = () => (\n  <ThemeProvider theme={theme}>\n    <AppPresenter/>\n  </ThemeProvider>\n)\n\nconst AppPresenter: React.FC = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route to={\"/\"} exact={true} component={Home}/>\n      <Redirect to={\"*\"} from={\"/\"}/>\n    </Switch>\n  </BrowserRouter>\n);\n\n\nexport default App;","import { createGlobalStyle } from \"./typed-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n    @import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');\r\n\r\n    html, body {\r\n        padding: 0;\r\n        margin: 0;\r\n        height: 100%;\r\n        font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\r\n    }\r\n    ul, li, a {\r\n        padding: 0;\r\n        margin: 0;\r\n        list-style: none;\r\n    }\r\n    a { \r\n        color: inherit;\r\n        text-decoration: none;\r\n    }\r\n`;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { GlobalStyles } from './styles/global-styles';\n\nReactDOM.render(\n<React.Fragment>\n    <App />\n    <GlobalStyles />\n</React.Fragment>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}